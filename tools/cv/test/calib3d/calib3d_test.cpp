//
//  calib3d_test.cpp
//  MNN
//
//  Created by MNN on 2022/07/15.
//  Copyright Â© 2018, Alibaba Group Holding Limited
//

#include <gtest/gtest.h>
#include <opencv2/calib3d.hpp>
#include <MNN/AutoTime.hpp>
#include "cv/calib3d.hpp"
#include "test_env.hpp"

#ifdef MNN_CALIB3D_TEST

static Env<float> testEnv(img_name, true);

// solvePnP
TEST(solvePnP, base) {
    float model_points[18] = {
        0.0, 0.0, 0.0, 0.0, -330.0, -65.0, -225.0, 170.0, -135.0,
        225.0, 170.0, -135.0, -150.0, -150.0, -125.0, 150.0, -150.0, -125.0
    };
    float image_points[12] = {
        359, 391, 399, 561, 337, 297, 513, 301, 345, 465, 453, 469
    };
    float camera_matrix[9] = {
        1200, 0, 600, 0, 1200, 337.5, 0, 0, 1
    };
    float dist_coeffs[4] = { 0, 0, 0, 0 };
    VARP mnnObj = _Const(model_points, {6, 3});
    VARP mnnImg = _Const(image_points, {6, 2});
    VARP mnnCam = _Const(camera_matrix, {3, 3});
    VARP mnnCoe = _Const(dist_coeffs, {4, 1});
    
    std::pair<VARP, VARP> mnnRes = solvePnP(mnnObj, mnnImg, mnnCam, mnnCoe);
    cv::Mat cvObj = cv::Mat(6, 3, CV_32F, model_points);
    cv::Mat cvImg = cv::Mat(6, 2, CV_32F, image_points);
    cv::Mat cvCam = cv::Mat(3, 3, CV_32F, camera_matrix);
    cv::Mat cvCoe = cv::Mat(4, 1, CV_32F, dist_coeffs);
    std::vector<float> rv(3), tv(3);
    cv::Mat rvecs(rv),tvecs(tv);
    cv::solvePnP(cvObj, cvImg, cvCam, cvCoe, rvecs, tvecs, false, cv::SOLVEPNP_SQPNP);
    EXPECT_TRUE(testEnv.equal(rvecs, mnnRes.first) && testEnv.equal(tvecs, mnnRes.second));
}

TEST(solvePnP, shoe) {
    float model_points[96] = {
        -0.030799999833106995, 0.0007699999841861427, -0.004399999976158142, -0.02474999986588955, 0.01209999993443489, -0.004399999976158142, -0.01759999990463257, 0.01924999989569187, -0.004399999976158142, -0.008799999952316284, 0.021449999883770943, -0.004399999976158142, 0.0, 0.022549999877810478, -0.004399999976158142, 0.008799999952316284, 0.021449999883770943, -0.004399999976158142, 0.01759999990463257, 0.01924999989569187, -0.004399999976158142, 0.02474999986588955, 0.01209999993443489, -0.004399999976158142, 0.030799999833106995, 0.0007699999841861427, -0.004399999976158142, 0.02474999986588955, -0.010999999940395355, -0.004399999976158142, 0.01759999990463257, -0.016499999910593033, -0.004399999976158142, 0.008799999952316284, -0.01979999989271164, -0.004399999976158142, 0.0, -0.021449999883770943, -0.004399999976158142, -0.008799999952316284, -0.01979999989271164, -0.004399999976158142, -0.01759999990463257, -0.016499999910593033, -0.004399999976158142, -0.02474999986588955, -0.010999999940395355, -0.004399999976158142, -0.030799999833106995, 0.0007699999841861427, 0.004399999976158142, -0.02474999986588955, 0.01209999993443489, 0.004399999976158142, -0.01759999990463257, 0.01924999989569187, 0.004399999976158142, -0.008799999952316284, 0.021449999883770943, 0.004399999976158142, 0.0, 0.022549999877810478, 0.004399999976158142, 0.008799999952316284, 0.021449999883770943, 0.004399999976158142, 0.01759999990463257, 0.01924999989569187, 0.004399999976158142, 0.02474999986588955, 0.01209999993443489, 0.004399999976158142, 0.030799999833106995, 0.0007699999841861427, 0.004399999976158142, 0.02474999986588955, -0.010999999940395355, 0.004399999976158142, 0.01759999990463257, -0.016499999910593033, 0.004399999976158142, 0.008799999952316284, -0.01979999989271164, 0.004399999976158142, 0.0, -0.021449999883770943, 0.004399999976158142, -0.008799999952316284, -0.01979999989271164, 0.004399999976158142, -0.01759999990463257, -0.016499999910593033, 0.004399999976158142, -0.02474999986588955, -0.010999999940395355, 0.004399999976158142
    };
    float image_points[64] = {
        -0.0013057183241471648, 0.09299874305725098, -0.010455395095050335, 0.07131724804639816, -0.026523245498538017, 0.046155307441949844, -0.04385042563080788, 0.02129918523132801, -0.06332534551620483, -0.004408818203955889, -0.08762498944997787, -0.03180401027202606, -0.11104003340005875, -0.05363212525844574, -0.11999830603599548, -0.05565139278769493, -0.11811254918575287, -0.042330302298069, -0.10884306579828262, -0.023449651896953583, -0.09400629997253418, -0.003091213759034872, -0.07834033668041229, 0.017524732276797295, -0.06170866638422012, 0.038823917508125305, -0.04244353622198105, 0.06119990721344948, -0.023676535114645958, 0.082001693546772, -0.005143166519701481, 0.09810793399810791, -0.01900496520102024, 0.10677685588598251, -0.028071928769350052, 0.08504459261894226, -0.04472069442272186, 0.060138411819934845, -0.06216795742511749, 0.03575018048286438, -0.08179453015327454, 0.010372052900493145, -0.1054963767528534, -0.017218351364135742, -0.1289127767086029, -0.039570920169353485, -0.13818585872650146, -0.04231918603181839, -0.13637131452560425, -0.029076160863041878, -0.12689357995986938, -0.009866510517895222, -0.1117326021194458, 0.011127307079732418, -0.09655033051967621, 0.03239363059401512, -0.07965713739395142, 0.053755879402160645, -0.06071771681308746, 0.07591498643159866, -0.04190481826663017, 0.09673473984003067, -0.02356795221567154, 0.11175438016653061
    };
    float camera_matrix[9] = {
       1, 0, 0, 0, 1, 0, 0, 0, 1
    };
    float dist_coeffs[4] = { 0, 0, 0, 0 };
    VARP mnnObj = _Const(model_points, {32, 3});
    VARP mnnImg = _Const(image_points, {32, 2});
    VARP mnnCam = _Const(camera_matrix, {3, 3});
    VARP mnnCoe = _Const(dist_coeffs, {4, 1});
    std::pair<VARP, VARP> mnnRes = solvePnP(mnnObj, mnnImg, mnnCam, mnnCoe);
    cv::Mat cvObj = cv::Mat(32, 3, CV_32F, model_points);
    cv::Mat cvImg = cv::Mat(32, 2, CV_32F, image_points);
    cv::Mat cvCam = cv::Mat(3, 3, CV_32F, camera_matrix);
    cv::Mat cvCoe = cv::Mat(4, 1, CV_32F, dist_coeffs);
    std::vector<float> rv(3), tv(3);
    cv::Mat rvecs(rv),tvecs(tv);
    cv::solvePnP(cvObj, cvImg, cvCam, cvCoe, rvecs, tvecs, false, cv::SOLVEPNP_SQPNP);
    EXPECT_TRUE(testEnv.equal(rvecs, mnnRes.first) && testEnv.equal(tvecs, mnnRes.second));
}

#endif
